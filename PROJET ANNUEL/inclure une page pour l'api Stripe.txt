Rumton est un organisme fictif représentant votre client.

inclure une page pour l'api Stripe dans mon powerpoint

cacher les clés API dans un fichier texte ou json.
pk_test_51RaCSbB0671vfetGyFxCnbmHLV8NVpVrMivQqv7AOCH9JLVW3hPGGnhASaAQg0eGu6snuBXlgF2LNjhBqvYB7TeB00DYhqwP3H

sk_test_51RaCSbB0671vfetGwURJcgE6c3UbM5B2zHTvJ74j1l3HFcsgqKQXvSsdkhlQroq6qE2x4cpQq1da8HpE4Y92S6HM007yyoSh5b

besoin est :
Ajouter le paiement Stripe au moment de l’inscription à une Course
tout en gardant ton approche servlet pur + Thymeleaf, sans framework Spring.

Process Stripe:
- Ajoute la dépendance Stripe Java dans ton pom.xml
- Préparer la clé API Stripe
- Ajouter un endpoint pour créer une PaymentIntent
👉 Pourquoi ?
Tu ne peux pas mettre le paiement directement dans le HTML : côté serveur, il faut d'abord créer une PaymentIntent pour générer un client_secret.

- Adapter ton frontend pour :✔️ Quand l’utilisateur clique « Suivant » dans ton formulaire,
👉 appeler ton servlet /create-payment-intent en fetch POST.

✔️ Utiliser le client Stripe.js pour traiter la carte

Pour tester stripe:
4242 4242 4242 4242 
CVC : 123

TESTS UNITAIRES
dans le fichier pom.xml, voici la variable qui vous donne le chemin de votre projet Java : ${project.basedir}


Utiliser H2 est un excellent choix pour ton projet sans Spring :

C’est léger

C’est embarqué (pas besoin d’un serveur DB à part)

Parfait pour des démos ou des tests rapides


Explication :

jdbc:h2:~/color_run_db → crée un fichier color_run_db.mv.db dans ton HOME

AUTO_SERVER=TRUE → permet à plusieurs processus Java d’y accéder


#commande pour lancer le h2
java -jar "C:\Program Files (x86)\H2\bin\h2-2.3.232.jar"

Il faut créer le dossier exception et les gérer

select * from utilisateur;

Je n'ai pas rajouter d'email à l'inscription pour le bien de la planète mais j'ai rajouté pour l'inscription à une course.


Pourquoi BCrypt ?
• Résistant au brute-force (coût configurable)
• Sel inclus dans le hash (pas de colonne « salt » à gérer)
• Implémentation mature, dispo pour Java (lib at.favre.lib:bcrypt)


Le servlet envoie le mot de passe en clair au service, et c’est désormais UserServiceImpl qui le transforme en hash avant d’enregistrer.




Ce qui se passe

    Servlet récupère les champs, crée l’objet User (password encore en clair)
    → aucune logique de sécurité dans la couche web.

    inscrireAdmin (service) :

        vérifie l’unicité de l’e-mail,

        appelle PasswordUtil.hash(password) pour générer le hash BCrypt,

        passe l’objet (modifié) au repository.

    Repository stocke le hash dans la colonne password.



Pour lancer le server tomcat

Créer (ou rouvrir) la configuration Run/Debug

    Run ▸ Edit Configurations…

    Cliquez sur + ► Tomcat Server ► Local

        Name : Color-Run (Tomcat)

        Application server : choisis ton Tomcat ajouté à l’étape 1.

    Onglet Deployment :

        + ► Artifact ► sélectionne ton WAR exploded
        (color_run:war exploded généré par Maven/Gradle).

        Contexte : color_run_war_exploded (ou ROOT si tu le déploies à la racine).

    Onglet Server (ports) : vérifie que HTTP port = 8080
    ou celui que tu utilises.

Clique Apply puis OK.
3. Lancer le serveur

    Icône verte ▶️ dans la barre d’outils – sélectionne ta config
    Color-Run (Tomcat) :
    IntelliJ affiche la console « Tomcat started on port(s): 8080 ».

    Ouvre ton navigateur :

http://localhost:8080/color_run_war_exploded

